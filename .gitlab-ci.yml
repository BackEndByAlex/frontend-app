# ─────────────────────────────────────────────────────────────
# GitLab CI/CD för frontend-app: endast build + deploy
# ─────────────────────────────────────────────────────────────

# Basimage med Docker CLI-stöd
image: docker:27-cli

# Definiera pipelinens två steg
stages:
  - build
  - deploy

# ─────────────────────────────────────────────────────────────
# Återanvändbar SSH-setup för deploy-steget
# ─────────────────────────────────────────────────────────────
.before_script_ssh_setup: &before_script_ssh_setup
  # Säkerställ att ssh-agent finns och installeras vid behov
  - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install -y openssh-client )
  # Starta ssh-agent
  - eval $(ssh-agent -s)
  # Lägg in privat SSH-nyckel från CI-variabeln SSH_PRIVATE_KEY
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  # Skapa och lås ner ~/.ssh
  - mkdir -p ~/.ssh 
  - chmod 700 ~/.ssh
  # Acceptera värdserverns host key automatiskt
  - ssh-keyscan -H "$PRODUCTION_HOST" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

# ─────────────────────────────────────────────────────────────
# 1) Build-jobb: bygger Docker-imagen och pushar till GitLab Registry
# ─────────────────────────────────────────────────────────────
build-job:
  stage: build
  # Om ni använder File-variabler för .env/public.pem, 
  # skapa config/ och injicera dem här
  before_script:
    - mkdir -p config
    - echo "$DOTENV_FILE"  > config/.env
    - echo "$PUBLIC_PEM"   > config/public.pem
  script:
    - echo "Bygger frontend-imagen..."
    # Bygg, logga in och pusha
    - docker build --pull -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  # only:
  #   - main

# ─────────────────────────────────────────────────────────────
# 2) Deploy-jobb: driftsätter via Docker-over-SSH → Docker Compose
# ─────────────────────────────────────────────────────────────
deploy_production_job:
  stage: deploy
  environment:
    name: production
    url: http://$PRODUCTION_HOST
  variables:
    REMOTE_HOST: $PRODUCTION_HOST # Set the REMOTE_HOST variable for production.
    DOCKER_HOST: ssh://ubuntu@$PRODUCTION_HOST # Docker connection via SSH.
  before_script: *before_script_ssh_setup # Reuse SSH setup steps.
  # Stegen som körs på värdmaskinen via Docker-over-SSH
  script:
    - echo "Bygger om och startar upp i produktion..."
    # Peka Docker CLI mot fjärrvärden
    - export DOCKER_HOST="ssh://$DEPLOY_USER@$PRODUCTION_HOST"
    # Hämta senaste image och starta om containrarna
    - docker compose -f docker-compose.yaml \
                     -f docker-compose.production.yaml \
                     pull
    - docker compose -f docker-compose.yaml \
                     -f docker-compose.production.yaml \
                     up --build -d
  # only:
  #   - main # Only run this job on the main branch.
  # needs:
  #   - unit-test-job
  #   - lint-test-job

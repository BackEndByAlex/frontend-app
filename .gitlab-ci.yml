# ─────────────────────────────────────────────────────────────
# GitLab CI/CD för frontend-app: endast build + deploy
# ─────────────────────────────────────────────────────────────

.before_script_ssh_setup: &before_script_ssh_setup
  # Ensure ssh-agent is installed and started, essential for managing SSH keys.
  # (Change apt-get to yum if using an RPM-based image)
  - command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )

  # Start the ssh-agent in the background.
  - eval $(ssh-agent -s)

  # Add the SSH private key stored in the SSH_PRIVATE_KEY variable to the ssh-agent.
  - ssh-add "$SSH_PRIVATE_KEY"

  # Create the .ssh directory and set the correct permissions.
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  # Use ssh-keyscan to add the remote server's SSH key to the known_hosts file.
  # This prevents SSH from prompting for approval of the remote server's key.
  - ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

# Specify the Docker image to be used for the jobs, which supports Docker commands.
image: docker:27-cli

stages:
  - build
  - deploy

# ─────────────────────────────────────────────────────────────
# 1) Build-jobb: bygger Docker-imagen och pushar till GitLab Registry
# ─────────────────────────────────────────────────────────────
build-job:
  stage: build
  # Om ni använder File-variabler för .env/public.pem, 
  # skapa config/ och injicera dem här
  script:
    - echo "Compiling the code..."
    - sleep 2 # Simulate compilation time.
    - echo "Compile complete."
  # only:
  #   - main

# ─────────────────────────────────────────────────────────────
# 2) Deploy-jobb: driftsätter via Docker-over-SSH → Docker Compose
# ─────────────────────────────────────────────────────────────
deploy_production_job:
  stage: deploy
  environment:
    name: production
    url: http://$PRODUCTION_HOST
  variables:
    REMOTE_HOST: $PRODUCTION_HOST # Set the REMOTE_HOST variable for production.
    DOCKER_HOST: ssh://ubuntu@$PRODUCTION_HOST # Docker connection via SSH.
  before_script: *before_script_ssh_setup # Reuse SSH setup steps.
  # Stegen som körs på värdmaskinen via Docker-over-SSH
  script:
    - echo "Bygger om och startar upp i produktion..."
    # Peka Docker CLI mot fjärrvärden
    - export DOCKER_HOST="ssh://$DEPLOY_USER@$PRODUCTION_HOST"
    # Hämta senaste image och starta om containrarna
    - docker compose -f docker-compose.yaml \
                     -f docker-compose.production.yaml \
                     pull
    - docker compose -f docker-compose.yaml \
                     -f docker-compose.production.yaml \
                     up --build -d
  # only:
  #   - main # Only run this job on the main branch.
  # needs:
  #   - unit-test-job
  #   - lint-test-job
